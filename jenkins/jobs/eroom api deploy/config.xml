<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1207.ve6191ff089f8">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2114.v2654ca_721309"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2114.v2654ca_721309">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.5">
      <projectUrl>https://github.com/e-room/e-room.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <org.jenkinsci.plugins.gwt.GenericTrigger plugin="generic-webhook-trigger@1.84">
          <spec></spec>
          <genericVariables>
            <org.jenkinsci.plugins.gwt.GenericVariable>
              <expressionType>JSONPath</expressionType>
              <key>ref</key>
              <value>$.ref</value>
              <regexpFilter></regexpFilter>
              <defaultValue></defaultValue>
            </org.jenkinsci.plugins.gwt.GenericVariable>
          </genericVariables>
          <regexpFilterText>$ref</regexpFilterText>
          <regexpFilterExpression>^(refs/heads/develop)</regexpFilterExpression>
          <printPostContent>false</printPostContent>
          <printContributedVariables>false</printContributedVariables>
          <causeString>Generic Cause</causeString>
          <token>eroom-backend</token>
          <tokenCredentialId></tokenCredentialId>
          <silentResponse>false</silentResponse>
          <overrideQuietPeriod>false</overrideQuietPeriod>
        </org.jenkinsci.plugins.gwt.GenericTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2759.v87459c4eea_ca_">
    <script>pipeline {
    agent any

    environment {
        imagename = &quot;larrykwon/eroom-api&quot;
        registryCredential = &apos;docker-hub&apos;
        dockerImage = &apos;&apos;
    }

    stages {
        stage(&apos;Prepare&apos;) {
          steps {
            echo &apos;Clonning Repository&apos;
            sh &apos;pwd&apos;
            sh &apos;ls -al&apos;
            git url: &apos;https://github.com/e-room/e-room.git&apos;,
              branch: &apos;develop&apos;,
              credentialsId: &apos;github&apos;
            sh &apos;ls -al&apos;
            }
            post {
             success { 
               echo &apos;Successfully Cloned Repository&apos;
             }
           	 failure {
               error &apos;This pipeline stops here...&apos;
             }
          }
        }

        stage(&apos;Bulid Gradle&apos;) {
          steps {
            echo &apos;Bulid Gradle&apos;
            sh &apos;pwd&apos;
            withGradle {
                sh &apos;./gradlew clean build --exclude-task test&apos;
            }
          }
          post {
            failure {
              error &apos;This pipeline stops here...&apos;
            }
          }
        }
        
        stage(&apos;Bulid Docker&apos;) {
          steps {
            echo &apos;Bulid Docker&apos;
            sh &apos;pwd&apos;
            // sh &apos;cd ./eroom-api-docker/eroom-api-dockerfile&apos;
            // dir(&apos;eroom-api-docker/eroom-api-dockerfile&apos;){
                script {
                    dockerImage = docker.build imagename
                }
            // }
          }
          post {
            failure {
              error &apos;This pipeline stops here...&apos;
            }
          }
        }

        stage(&apos;Push Docker&apos;) {
          steps {
            echo &apos;Push Docker&apos;
            sh &apos;ls -al&apos;
            script {
                docker.withRegistry( &apos;&apos;, registryCredential) {
                    dockerImage.push() 
                }
            }
          }
          post {
            failure {
              error &apos;This pipeline stops here...&apos;
            }
          }
        }
        
        stage(&apos;Docker Run&apos;) {
            steps {
                echo &apos;Pull Docker Image &amp; Docker Image Run&apos;
                sshagent (credentials: [&apos;ssh&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no ubuntu@ec2-43-200-50-204.ap-northeast-2.compute.amazonaws.com &apos;docker pull larrykwon/eroom-api:latest&apos;&quot; 
                    sh &quot;ssh -o StrictHostKeyChecking=no ubuntu@ec2-43-200-50-204.ap-northeast-2.compute.amazonaws.com &apos;docker ps -aq --filter name=eroom-api-core | grep . &amp;&amp; docker rm -f \$(docker ps -aq --filter name=eroom-api-core)&apos;&quot;
                    sh &quot;ssh -o StrictHostKeyChecking=no ubuntu@ec2-43-200-50-204.ap-northeast-2.compute.amazonaws.com &apos;docker run -d --name eroom-api-core -p 8080:8080 larrykwon/eroom-api:latest&apos;&quot;
                }
            }
        }
    }
    post {
        success {
            slackSend (channel: &apos;#tech-deploy&apos;, color: &apos;#00FF00&apos;, message: &quot;SUCCESSFUL: Job &apos;${env.JOB_NAME} [${env.BUILD_NUMBER}]&apos; (${env.BUILD_URL})&quot;)
        }
        failure {
            slackSend (channel: &apos;#tech-deploy&apos;, color: &apos;#FF0000&apos;, message: &quot;FAILED: Job &apos;${env.JOB_NAME} [${env.BUILD_NUMBER}]&apos; (${env.BUILD_URL})&quot;)
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>